{"version":3,"sources":["pages/SmsCard.js","pages/AllMessageContainer.js","App.js","serviceWorker.js","index.js"],"names":["SmsCard","date","seconds","Math","floor","Date","getTime","interval","Card","bg","className","Body","Title","this","props","sms","phone","Text","text","Footer","timeSince","timeStamp","Component","AllMessageContainer","cardRender","smsList","reverse","map","App","state","setState","console","log","value","smsListReset","axios","get","then","response","data","catch","error","Navbar","variant","Brand","href","target","alt","src","width","height","Button","size","block","onClick","e","onButtonClick","disabled","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.024924ce.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Card from 'react-bootstrap/Card';\n\nclass SmsCard extends Component {\n    timeSince(date) {\n        let seconds = Math.floor(((new Date().getTime()/1000) - date)),\n        interval = Math.floor(seconds / 31536000);\n        \n        if (interval > 1) return interval + \"y ago\";\n        \n        interval = Math.floor(seconds / 2592000);\n        if (interval > 1) return interval + \"m ago\";\n        \n        interval = Math.floor(seconds / 86400);\n        if (interval >= 1) return interval + \"Days ago\";\n        \n        interval = Math.floor(seconds / 3600);\n        if (interval >= 1) return interval + \"Hours ago\";\n        \n        interval = Math.floor(seconds / 60);\n        if (interval > 1) return interval + \"m ago\";\n        \n        return Math.floor(seconds) + \"s ago\";\n      }\n\n\n    render(){\n        // console.log(this.props.sms)\n        return(\n            <Card bg={'light'} className=\"mb-2\">\n                <Card.Body>\n                    <Card.Title> {this.props.sms.phone}</Card.Title>\n                    <Card.Text>{this.props.sms.text}</Card.Text>\n                    <Card.Footer className=\"text-muted\">{this.timeSince(this.props.sms.timeStamp)}</Card.Footer>\n                </Card.Body>\n            </Card>\n        )\n    }\n}\n\nexport default SmsCard;","import React, {Component} from 'react';\nimport SmsCard from './SmsCard'\n\n\nclass AllMessageContainer extends Component {\n    render() {\n        // console.log (this.props.smsList)\n        const cardRender = this.props.smsList.reverse().map((sms) => {\n            return (\n                <SmsCard sms={sms}/>\n            )\n        })\n\n        // show empty if no sms\n        return(\n            cardRender? cardRender: null\n        )\n    }\n}\n\n\nexport default AllMessageContainer","import React, { Component } from 'react';\nimport './App.css';\n\nimport axios from 'axios';\n\n// import fontawesome \nimport { FaGithub, FaLinkedin, FaEnvelope} from \"react-icons/fa\";\n\n// import pages and componenets\nimport AllMessageContainer from './pages/AllMessageContainer'\n\n// bootstrap imports\nimport Button from 'react-bootstrap/Button';\nimport Navbar from 'react-bootstrap/Navbar'\n\n// standardized URL for API\nconst APIURL = 'https://obscure-lowlands-72494.herokuapp.com/'\n\n\nclass App extends Component {\n  constructor(props){\n    super (props)\n    \n    this.state = {\n      smsList: []\n    }\n  }\n  \n  smsListReset() {\n    this.setState({\n      smsList: []\n    })\n    console.log('list reset');\n  }\n\n\n  // used for testing test button ONLY with local host environment\n  onTestButtonClick(value) {\n    console.log(value);\n    this.smsListReset()\n    axios.get('http://localhost:5000/' + value +'api')\n    .then(response => {\n      // console.log(response.data);\n      this.setState({\n        smsList: response.data\n      }) \n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n\n\n  // production button click\n  onButtonClick(value) {\n    // console.log( value + ' Button is clicked');\n    // console.log(APIURL + value + 'api');\n    this.smsListReset()\n    axios.get(APIURL + value + 'api')\n    .then(response => {\n      // console.log(response.data);\n      this.setState({\n        smsList: response.data\n      }) \n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"http://almudhan.com.sa/\" target= \"blank\">\n            <img\n              alt=\"Almudhan Group Logo\"\n              src=\"http://almudhan.com.sa/images/logo.png?v=1\"\n              width=\"40\"\n              height=\"40\"\n              className=\"d-inline-block\"\n            />{' '} Almudhan Group\n          </Navbar.Brand>\n        </Navbar>\n  \n        <main className=\"App-body\">\n          {/* <Button value = 'test' variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onTestButtonClick(e.target.value)} >Check TEST New Code at ***88</Button> */}\n          <Button value = 'ali' variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onButtonClick(e.target.value)} >Check Ali New Code at **06</Button>\n          <Button value = 'edward' variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onButtonClick(e.target.value)} >Check Edward New Code at **05</Button>\n          <Button value = 'hanady' variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onButtonClick(e.target.value)} >Check Hanady New Code at ***40 </Button>\n          <Button disabled value = 'hanna' variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onButtonClick(e.target.value)} >Check Hanna New Code at **25 </Button>\n          <Button value = 'hisham' variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onButtonClick(e.target.value)} >Check Hisham New Code at ***88</Button>\n          <Button value = 'mofareh' variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onButtonClick(e.target.value)} >Check Mofareh New Code at ***40</Button>\n          <Button value = 'tahani'  variant=\"outline-dark\" size=\"lg\" block onClick = {(e) => this.onButtonClick(e.target.value)} >Check Tahani New Code at ***36</Button>\n          <AllMessageContainer smsList = {this.state.smsList}/>\n        </main>\n\n        <Navbar bg=\"dark\" className=\"justify-content-center\">\n          <footer className=\"App-footer\">\n            <p>created by Hisham Aljahbli for Almudhan Group</p>\n            <div id='footer-nav'>\n              <a href=\"https://www.linkedin.com/in/haljahbli-softwareeng\" target= \"blank\"> <FaLinkedin/></a>\n              <a href=\"https://github.com/hamjahb\" target= \"blank\"><FaGithub/></a>\n              <a href=\"mailto:h.aljahbli@gmail.com\"><FaEnvelope/></a>\n            </div>\n          </footer>\n        </Navbar>\n      </div>\n    );\n    \n  }\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}